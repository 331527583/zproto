.template 0
#   zproto_codec_php.gsl
#
#   Generates a codec for a protocol specification
#
include "zproto_lib.gsl"
include "zproto_lib_php.gsl"
include "zproto_bnf.gsl"
resolve_includes ()
expand_headers ()
generate_bnf ()
set_defaults ()
.endtemplate

.output "$(class.package_dir:no)/$(php_basename()).php"
<?php

/**
 * Library $(php_basename()) is 100% generated. If you edit this file,
 * you will lose your changes at the next build cycle.
 * DO NOT MAKE ANY CHANGES YOU WISH TO KEEP.
 *
 * The correct places for commits are:
 *  - The XML model used for this code generation: $(filename)
 *  - The code generation script that built this file: $(script)
.   for class.license
.       if first()
 *
.       endif
 *  $(string.trim (license.):block                                    )
.   endfor
 */

namespace $(php_namespace());

/**
 * A message in $(class.title:no).
 */
class $(php_basename())
{
    /**
     * Buffer holds the serialized data.
     */
    protected $buffer;

    /**
     * Needle
     */
    protected $needle = 0;

    /**
     * $(php_basename()) constructor
     *
     * @param string $msg The message
     */
    public function __construct($msg=NULL)
    {
        // puts/serializes the message signature if $msg is null
        if ($msg == NULL) {
            // 0xAAA1 is the signature of Elastic Noggin Archive messages
            $this->buffer = pack('C*', 0xAA, 0xA0 | $(class.signature), static::ID);
        } else {
            $this->buffer = $msg;
        }
    }

    /**
     * Validates the signature of the message.
     */
    public function hasValidSignature()
    {
        if (!is_string($this->buffer)) {
            return FALSE;
        }

        // A message has to be at least three bytes, two bytes for
        // signature and one byte for the ID of the message
        return strlen($this->buffer) >= 3 &&
               ord($this->buffer[0]) == 0xAA &&
               ord($this->buffer[1]) == 0xA0 | $(class.signature);
    }

    /**
     * Validates the signature and type/ID of the message.
     */
    public function isValid()
    {
        return $this->getId() == static::ID;
    }

    /**
     * Returns the ID of the message.
     */
    public function getId()
    {
        if ($this->hasValidSignature()) {
            return ord($this->buffer[2]);
        }

        return FALSE;
    }

    /**
     * Unserializes a message. This method is used by unserialize method of
     * the messages in the child class and shouldn't be used directly.
     */
    protected function unserialize()
    {
        if (!$this->isValid()) {
            throw new \Exception(
                'Invalid signature or message type: ' . bin2hex($this->buffer(3))
            );
        }

        // It's a valid message, move the needle to point to the forth byte (0..3)
        $this->needle = 3;
    }

    /**
     * Serializes the given string
     *
     * @param string $string The string being serialized
     */
    protected function putString($string)
    {
        // Put the length of the string first
        $this->putNumber(strlen($string));
        $this->buffer .= $string;
    }

    /**
     * Serializes the given string
     *
     * @param string $string The string being serialized
     */
    protected function putLongString($string)
    {
        $this->putNumber4(strlen($string));
        $this->buffer .= $string;
    }

    /**
     * Unserializes a string. A serialized string consists of one byte length
     * followed by the string itself.
     */
    protected function getString()
    {
        $len = ord($this->buffer());
        return $this->buffer($len);
    }

    /**
     * Serializes a string. A serialized string consists of one byte length
     * followed by the string itself.
     *
     * @param string $string The string being serialized
     */
    protected function putBytes($string)
    {
        $this->putNumber8(strlen($string));
        $this->buffer .= $string;
    }

    /**
     * Unserializes byte array which is could have a 64-bit long in length which
     * is huge. The 64-bit length is followed by the data itself. We treat the
     * byte array as PHP strings which is a binary safe string.
     */
    protected function getBytes()
    {
        $len = $this->getNumber8();
        return $this->buffer($len);
    }

    /**
     * Unserializes a 8-bit number.
     */
    protected function getNumber()
    {
        return unpack('C', $this->buffer(1));
    }

    /**
     * Unserializes a 16-bit number.
     */
    protected function getNumber2()
    {
        return unpack('n', $this->buffer(2));
    }

    /**
     * Unserializes a 32-bit number.
     */
    protected function getNumber4()
    {
        return unpack('N', $this->buffer(4));
    }

    /**
     * Unserializes a 64-bit number.
     */
    protected function getNumber8()
    {
        $num = unpack('Nhigher/Nlower', $this->buffer(8));
        $num = $num['higher'] << 32 | $num['lower'];

        return $num;
    }

    /**
     * Unserializes a hash.
     */
    protected function getHash()
    {
        $hash = [];
        $size = $this->getNumber4();

        for ($i = 0; $i < $size; $i++) {
            $key   = $this->getString();
            $value = $this->getLongString();

            $hash[$key] = $value;
        }

        return $hash;
    }

    /**
     * Serializes a 8-bit number.
     *
     * @param number $number The number being serialized
     */
    protected function putNumber($number)
    {
        $this->buffer .= chr($number);
    }

    /**
     * Serializes a 16-bit number.
     *
     * @param number $number The number being serialized
     */
    protected function putNumber2($number)
    {
        $this->buffer .= pack('n', $number);
    }

    /**
     * Serializes a 32-bit number.
     *
     * @param number $number The number being serialized
     */
    protected function putNumber4($number)
    {
        $this->buffer .= pack('N', $number);
    }

    /**
     * Serializes a 64-bit number.
     *
     * @param number $number The number being serialized
     */
    protected function putNumber8($number)
    {
        $this->buffer .= pack('NN', $number & 0xffffffff00000000, $number & 0x00000000ffffffff);
    }

    /**
     * Serializes a hash.
     *
     * @param number $has The hash being serialized
     */
    protected function putHash(array $hash)
    {
        $this->putNumber4(count($hash));
        foreach ($hash as $key => $val) {
            $this->putString($key);
            $this->putLongString($val);
        }
    }

    /**
     * Buffer returns a bytes array size of $size started at $this->needle
     *
     * @param int $size Number of bytes
     */
    protected function buffer($size = 1)
    {
        // Make sure buffer is initialized
        if (!isset($this->buffer[$this->needle+($size-1)])) {
            throw new \Exception('Malformed message');
        }

        $bytes = substr($this->buffer, $this->needle, $size);
        $this->needle += $size;

        return $bytes;
    }
}
.#
.# Each message is in a separate file
.#
.for message
.output "$(class.package_dir:no)/$(php_basename())/$(php_name(message.name)).php"
<?php

/**
 * Library $(php_basename()) is 100% generated. If you edit this file, you will
 * lose your changes at the next build cycle.
 * DO NOT MAKE ANY CHANGES YOU WISH TO KEEP.
 *
 * The correct places for commits are:
 *  - The XML model used for this code generation: $(filename)
 *  - The code generation script that built this file: $(script)
.   for class.license
.       if first()
 *
.       endif
 *  $(string.trim (license.):block                                             )
.   endfor
 */

namespace $(php_namespace())\\$(php_basename());

use $(php_namespace())\\$(php_basename());

/**
.    if defined(message.)
 * $(string.trim (message.):block                                              )
.    else
 * The $(php_name(message.name)) serializes a $(message.name:cobol,upper) message in $(class.title:no).
.    endif
 */
class $(php_name(message.name)) extends $(php_basename())
{
    /**
     * Message ID
     */
    const ID = $(id);

.    for field
.        phpdoc     = "@var $(phptype) \$$(php_lcfirst(name))$(defined(field.)??' ')"
.        phpdocdesc = "$(field.?'':no)"
.        phpdocdesc = string.justify(phpdocdesc, 100 - string.length(phpdoc))
    /**
     * $(phpdoc:block,no)$(phpdocdesc:no,block)
     */
    public \$$(php_lcfirst(name));

.    endfor
    /**
     * Unserializes a $(message.name:cobol,upper) message
     *
     * @access public
     * @return void
     */
    public function unserialize()
    {
        parent::unserialize();

.    for field
.        if field.type = "number"
        \$this->$(php_lcfirst(name)%-$(field_maxlen)s) = \$this->get$(Phptype)$(size)();
.        elsif field.type = "chunk"
        \$this->$(php_lcfirst(name)%-$(field_maxlen)s) = \$this->getBytes();
.        elsif field.type = "hash"
        \$this->$(php_lcfirst(name)%-$(field_maxlen)s) = \$this->getHash();
.        else
        \$this->$(php_lcfirst(name)%-$(field_maxlen)s) = \$this->get$(Phptype)();
.        endif
.    endfor
    }

    /**
     * Serializes a $(message.name:cobol,upper) message
     *
     * @access public
     * @return serialized binary data
     */
    public function serialize()
    {
.    for field
.        if field.type = "number"
        \$this->put$(Phptype)$(size)(\$this->$(php_lcfirst(name)));
.        elsif field.type = "chunk"
        \$this->putBytes(\$this->$(php_lcfirst(name)));
.        elsif field.type = "hash"
        \$this->putHash(\$this->$(php_lcfirst(name)));
.        else
        \$this->put$(Phptype)(\$this->$(php_lcfirst(name)));
.        endif
.    endfor

        return $this->buffer;
    }
}
.endfor
