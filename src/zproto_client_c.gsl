.template 0
#   zproto_client_c.gsl
#
#   Generates a client class for a protocol specification
#   This manages a DEALER client talking to a ROUTER server.
#
include "zproto_lib.gsl"
resolve_includes ()
set_defaults ()

#   Load message structures for this engine
global.proto = xml.load_file (class.protocol_class + ".xml")
class.proto = class.protocol_class

#   Lowercase state/event/action names
for class.state
    state.name = "$(name)"
    for event
        event.name = "$(name)"
        if defined (event.next)
            event.next = "$(next)"
        endif
        for action
            action.name = "$(name)"
        endfor
    endfor
endfor

#   Lowercase protocol message names and normalize spaces/hyphens
for proto.message
    message.name = "$(name:c)"
endfor

#  Collect all events and actions at class level
for class.state
    state.comma = last()?? ""? ","
    for event where name <> "*"
        event.name = "$(event.name:c)"
        #   Mark event as external if it a protocol message
        if count (proto.message, message.name = event.name)
            event.external = 1
        endif
        #   Copy event to class if not yet defined there
        if count (class.event, name = -1.name) = 0
            copy event to class
        endif
    endfor
    for event
        for action where count (class.action, name = -1.name) = 0
            copy action to class
        endfor
    endfor
endfor

#   Process super states
for class.state where defined (inherit)
    for class.state as superstate where name = inherit
        for event where count (state.event, name = -1.name) = 0
            copy event to state
        endfor
    else
        echo "E: superstate $(inherit) isn't defined"
    endfor
endfor

#   Collect prototypes that we need
for class.action
    if name <> "send" \
    &  name <> "terminate"
        new class.prototype
            prototype.name = "$(action.name:c)"
            prototype.ctype = "void"
            prototype.exists = 0
            prototype.args = "client_t *self"
        endnew
    endif
endfor

function assume_property (name, type, alloc)
    if count (class.property, name = my.name) = 0
        new class.property
            property.name = "$(my.name:c)"
            property.type = my.type
            property.alloc = my.alloc
            if type = "string"
                property.ctype = "const char *"
            elsif type = "number"
                property.ctype = "int "
            elsif type = "msg"
                property.ctype = "zmsg_t *"
            endif
        endnew
    endif
endfunction

#   Process replies from actor, and methods to actor
for class.reply
    reply.pattern = ""
    for field
        field.name = "$(field.name:c)"
        assume_property (field.name, field.type, 1)
        if field.type = "string"
            reply.pattern += "s"
        elsif field.type = "number"
            reply.pattern += "i"
        else
            echo "E: we didn't add support for $(type)s in method fields"
        endif
    endfor
endfor

for class.method
    method.args = ""
    method.ctype = "int"
    method.pattern = ""
    method.immediate ?= 0
    for field
        field.name = "$(name:c)"
        if field.type = "string"
            method.pattern += "s"
            method.args += ", const char *$(name)"
        elsif field.type = "number"
            method.pattern += "i"
            method.args += ", int $(name)"
        else
            echo "E: we didn't add support for $(type)s in method fields"
        endif

        #   Collect all fields into class.argument block
        if count (class.argument, argument.name = field.name) = 0
            new class.argument
                argument.name = field.name
                argument.type = field.type
                if field.type = "string"
                    argument.ctype = "char *"
                else
                    argument.ctype = "int "
                endif
            endnew
        endif
    endfor
    if defined (method.return)
        method.return = "$(return:c)"
        for class.property where name = method.return
            method.return = "self->" + method.return
            if property.type = "string"
                method.ctype = "const char *"
            elsif property.type = "number"
                method.ctype = "int"
            endif
        endfor
    else
        method.return = "0"
    endif
    if method.name = "constructor"
        method.args = string.substr (method.args, 2)
        if method.args = ""
            method.args = "void"
        endif
    endif
endfor

for class.send
    for message as method
        method.args = ""
        method.cname = "$(name:c)"
        method.pattern = ""
        for proto.message where name = -1.cname
            for field
                copy field to method
            endfor
        endfor
        for method.field
            if type = "number"
                method.args += ", int $(name)"
                field.ctype = "int "
                pattern += size
            elsif type = "string"
                method.args += ", char *$(name)"
                field.ctype = "char *"
                pattern += "s"
            elsif type = "longstr"
                method.args += ", char *$(name)"
                field.ctype = "char *"
                pattern += "S"
            elsif type = "chunk" | type = "frame" | type = "msg"
                method.args += ", z$(type)_t **$(name)_p"
                field.ctype = "z$(type)_t *"
                pattern += "p"
            endif
        endfor
    endfor
endfor

for class.recv
    for message as method
        assume_property ("command", "string", 1)
        method.cname = "$(name:c)"
        method.pattern = ""
        method.return = ""
        for proto.message where name = -1.cname
            for field
                copy field to method
            endfor
        endfor
        for method.field
            assume_property (field.name, field.type, 0)
            if type = "number"
                field.ctype = "int "
                pattern += size
            elsif type = "string"
                field.ctype = "char *"
                pattern += "s"
            elsif type = "longstr"
                field.ctype = "char *"
                pattern += "S"
            elsif type = "chunk" | type = "frame" | type = "msg"
                field.ctype = "z$(type)_t *"
                pattern += "p"
            endif
            if type = "msg"
                method.return = name
            endif
        endfor
        if method.return = ""
            echo "E: no msg field defined in '$(name)'"
        endif
    endfor
endfor

.endtemplate
.#  This is the API for the client
.output "$(class.package_dir)/$(class.name).h"
/*  =========================================================================
    $(class.name) - $(class.title:)

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

     * The XML model used for this code generation: $(filename), or
     * The code generation script that built this file: $(script)
    ************************************************************************
.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

#ifndef __$(CLASS.NAME)_H_INCLUDED__
#define __$(CLASS.NAME)_H_INCLUDED__

#ifdef __cplusplus
extern "C" {
#endif

//  Opaque class structure
#ifndef $(CLASS.NAME)_T_DEFINED
typedef struct _$(class.name)_t $(class.name)_t;
#define $(CLASS.NAME)_T_DEFINED
#endif

//  @interface
//  Create a new $(class.name)
.for class.method where name = "constructor"
//  $(method.?'No explanation':justify,block%-80s)
$(CLASS.EXPORT_MACRO)$(class.name)_t *
    $(class.name)_new ($(args));
.else

$(CLASS.EXPORT_MACRO)$(class.name)_t *
    $(class.name)_new (void);
.endfor

//  Destroy the $(class.name)
$(CLASS.EXPORT_MACRO)void
    $(class.name)_destroy ($(class.name)_t **self_p);

//  Enable verbose logging of client activity
$(CLASS.EXPORT_MACRO)void
    $(class.name)_verbose ($(class.name)_t *self);

//  Return message pipe for asynchronous message I/O. In the high-volume case,
//  we send methods and get replies to the actor, in a synchronous manner, and
//  we send/recv high volume message data to a second pipe, the msgpipe. In
//  the low-volume case we can do everything over the actor pipe, if traffic
//  is never ambiguous.
$(CLASS.EXPORT_MACRO)zsock_t *
    $(class.name)_msgpipe ($(class.name)_t *self);

.for class.method where name <> "constructor" & name <> "destructor"
//  $(method.?'No explanation':justify,block%-80s)
.   if count (method.accept)
.       if method.ctype = "int"
//  Returns >= 0 if successful, -1 if interrupted.
.       else
//  Returns NULL on an interrupt.
.       endif
.   endif
$(CLASS.EXPORT_MACRO)$(ctype)
    $(class.name)_$(name:c) ($(class.name)_t *self$(args));

.endfor
.for class.send
.   for message as method
//  Send $(name:) message to server
$(CLASS.EXPORT_MACRO)int
    $(class.name)_$(name:c) ($(class.name)_t *self$(args));

.   endfor
.endfor
.for class.recv
//  Receive message from server; caller destroys message when done
$(CLASS.EXPORT_MACRO)zmsg_t *
    $(class.name)_recv ($(class.name)_t *self);

.endfor
.for class.property
//  Return last received $(name)
$(CLASS.EXPORT_MACRO)$(ctype)
    $(class.name)_$(name) ($(class.name)_t *self);

.endfor
//  Self test of this class
$(CLASS.EXPORT_MACRO)void
    $(class.name)_test (bool verbose);
//  @end

#ifdef __cplusplus
}
#endif

#endif
.output "$(class.name)_engine.inc"
/*  =========================================================================
    $(class.name)_engine - $(class.title:) engine

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

     * The XML model used for this code generation: $(filename), or
     * The code generation script that built this file: $(script)
    ************************************************************************
.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/


//  ---------------------------------------------------------------------------
//  State machine constants

typedef enum {
.for class.state
.   state.comma = last()?? ""? ","
    $(name:c)_state = $(index ())$(comma)
.endfor
} state_t;

typedef enum {
    NULL_event = 0,
.for class.event
.   event.comma = last()?? ""? ","
    $(name)_event = $(index ())$(comma)
.endfor
} event_t;

//  Names for state machine logging and error reporting
static char *
s_state_name [] = {
    "(NONE)",
.for class.state
    "$(name)"$(comma)
.endfor
};

static char *
s_event_name [] = {
    "(NONE)",
.for class.event
.   if defined (event.external)
    "$(NAME)"$(comma)
.   else
    "$(name)"$(comma)
.   endif
.endfor
};
 

//  ---------------------------------------------------------------------------
//  Context for the client. This embeds the application-level client context
//  at its start (the entire structure, not a reference), so we can cast a
//  pointer between client_t and s_client_t arbitrarily.

//  These are the different method arguments we manage automatically
struct _client_args_t {
.   for class.argument
    $(ctype)$(name);
.   else
    int struct_cannot_be_empty;
.   endfor
};

typedef struct {
    client_t client;            //  Application-level client context
    zsock_t *cmdpipe;           //  Get/send commands from caller API
    zsock_t *msgpipe;           //  Get/send messages from caller API
    zsock_t *dealer;            //  Socket to talk to server
    zloop_t *loop;              //  Listen to pipe and dealer
    $(proto)_t *message;        //  Message received or sent
    client_args_t args;         //  Method arguments structure
    bool terminated;            //  True if client is shutdown
    size_t timeout;             //  inactivity timeout, msecs
    state_t state;              //  Current state
    event_t event;              //  Current event
    event_t next_event;         //  The next event
    event_t exception;          //  Exception event, if any
    int expiry_timer;           //  zloop timer for timeouts
    int wakeup_timer;           //  zloop timer for alarms
    event_t wakeup_event;       //  Wake up with this event
    bool verbose;               //  Verbose logging enabled?
} s_client_t;

static int
    client_initialize (client_t *self);
static void
    client_terminate (client_t *self);
static void
    s_client_destroy (s_client_t **self_p);
static void
    s_client_execute (s_client_t *self, event_t event);
static int
    s_client_handle_wakeup (zloop_t *loop, int timer_id, void *argument);
.if count (class.event, name = "expired")
static int
    s_client_handle_timeout (zloop_t *loop, int timer_id, void *argument);
.endif
static void
    s_satisfy_pedantic_compilers (void);
.for class.prototype
static $(ctype)
    $(name) ($(args));
.endfor

//  Create a new client connection

static s_client_t *
s_client_new (zsock_t *cmdpipe, zsock_t *msgpipe)
{
    s_client_t *self = (s_client_t *) zmalloc (sizeof (s_client_t));
    if (self) {
        assert ((s_client_t *) &self->client == self);
        self->cmdpipe = cmdpipe;
        self->msgpipe = msgpipe;
        self->dealer = zsock_new (ZMQ_DEALER);
        if (self->dealer)
            self->message = $(proto)_new ();
        if (self->message)
            self->loop = zloop_new ();
        if (self->loop) {
            //  Give application chance to initialize and set next event
.for class.state where item () = 1
            self->state = $(name:c)_state;
.endfor
            self->event = NULL_event;
            self->client.cmdpipe = self->cmdpipe;
            self->client.msgpipe = self->msgpipe;
            self->client.dealer = self->dealer;
            self->client.message = self->message;
            self->client.args = &self->args;
            if (client_initialize (&self->client))
                s_client_destroy (&self);
        }
        else
            s_client_destroy (&self);
    }
    s_satisfy_pedantic_compilers ();
    return self;
}

//  Destroy the client connection

static void
s_client_destroy (s_client_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        s_client_t *self = *self_p;
.for class.argument where type = "string"
        zstr_free (&self->args.$(name));
.endfor
        client_terminate (&self->client);
        $(proto)_destroy (&self->message);
        zsock_destroy (&self->msgpipe);
        zsock_destroy (&self->dealer);
        zloop_destroy (&self->loop);
        free (self);
        *self_p = NULL;
    }
}

//  ---------------------------------------------------------------------------
//  These methods are an internal API for actions

//  Set the next event, needed in at least one action in an internal
//  state; otherwise the state machine will wait for a message on the
//  dealer socket and treat that as the event.

static void
engine_set_next_event (client_t *client, event_t event)
{
    if (client) {
        s_client_t *self = (s_client_t *) client;
        self->next_event = event;
    }
}

//  Raise an exception with 'event', halting any actions in progress.
//  Continues execution of actions defined for the exception event.

static void
engine_set_exception (client_t *client, event_t event)
{
    if (client) {
        s_client_t *self = (s_client_t *) client;
        self->exception = event;
    }
}

//  Set wakeup alarm after 'delay' msecs. The next state should handle the
//  wakeup event. The alarm is cancelled on any other event.

static void
engine_set_wakeup_event (client_t *client, size_t delay, event_t event)
{
    if (client) {
        s_client_t *self = (s_client_t *) client;
        if (self->wakeup_timer) {
            zloop_timer_end (self->loop, self->wakeup_timer);
            self->wakeup_timer = 0;
        }
        self->wakeup_timer = zloop_timer (
            self->loop, delay, 1, s_client_handle_wakeup, self);
        self->wakeup_event = event;
    }
}

//  Set timeout for next protocol read. By default, will wait forever
//  or until the process is interrupted. The timeout is in milliseconds.
//  The state machine must handle the "expired" event.

static void
engine_set_timeout (client_t *client, size_t timeout)
{
    if (client) {
        s_client_t *self = (s_client_t *) client;
        self->timeout = timeout;
.if count (class.event, name = "expired")
        if (self->timeout)
            self->expiry_timer = zloop_timer (
                self->loop, self->timeout, 1, s_client_handle_timeout, self);
.endif
    }
}

//  Poll socket for activity, invoke handler on any received message.
//  Handler must be a CZMQ zloop_fn function; receives client as arg.

static void
engine_handle_socket (client_t *client, zsock_t *sock, zloop_reader_fn handler)
{
    if (client && sock) {
        s_client_t *self = (s_client_t *) client;
        if (handler != NULL) {
            int rc = zloop_reader (self->loop, sock, handler, self);
            assert (rc == 0);
            zloop_reader_set_tolerant (self->loop, sock);
        }
        else
            zloop_reader_end (self->loop, sock);
    }
}

//  Pedantic compilers don't like unused functions, so we call the whole
//  API, passing null references. It's nasty and horrid and sufficient.

static void
s_satisfy_pedantic_compilers (void)
{
    engine_set_next_event (NULL, NULL_event);
    engine_set_exception (NULL, NULL_event);
    engine_set_timeout (NULL, 0);
    engine_set_wakeup_event (NULL, 0, NULL_event);
    engine_handle_socket (NULL, 0, NULL);
}


//  ---------------------------------------------------------------------------
//  Generic methods on protocol messages
//  TODO: replace with lookup table, since ID is one byte

static event_t
s_protocol_event (s_client_t *self, $(proto)_t *message)
{
    assert (message);
    switch ($(proto)_id (message)) {
.   for proto.message where count (class.event, event.name = message.name) = 1
        case $(PROTO)_$(NAME):
            return $(name)_event;
            break;
.   endfor
        default:
            zsys_error ("$(class.name): invalid protocol event, halting");
            self->terminated = true;
            return NULL_event;
    }
}

.macro output_action_body ()
.       for action
                    if (!self->exception) {
.           if name = "send"
                        //  send $(MESSAGE:C)
                        if (self->verbose)
                            zsys_debug ("$(class.name):         $ $(name) $(MESSAGE:C)");
                        $(proto)_set_id (self->message, $(PROTO)_$(MESSAGE:C));
.               if switches.trace ?= 1
                        zsys_debug ("$(class.name): Send message to server");
                        $(proto)_print (self->message);
.               endif
                        $(proto)_send (self->message, self->dealer);
.           elsif name = "terminate"
                        //  terminate
                        if (self->verbose)
                            zsys_debug ("$(class.name):         $ $(name)");
                        self->terminated = true;
.           else
                        //  $(name)
                        if (self->verbose)
                            zsys_debug ("$(class.name):         $ $(name)");
                        $(name:c) (&self->client);
.           endif
                    }
.       endfor
.       if defined (event.next)
                    if (!self->exception)
                        self->state = $(next:c)_state;
.       endif
.endmacro

//  Execute state machine as long as we have events; if event is NULL_event,
//  or state machine is terminated, do nothing.

static void
s_client_execute (s_client_t *self, event_t event)
{
    self->next_event = event;
    //  Cancel wakeup timer, if any was pending
    if (self->wakeup_timer) {
        zloop_timer_end (self->loop, self->wakeup_timer);
        self->wakeup_timer = 0;
    }
    while (!self->terminated && self->next_event != NULL_event) {
        self->event = self->next_event;
        self->next_event = NULL_event;
        self->exception = NULL_event;
        if (self->verbose) {
            zsys_debug ("$(class.name): %s:", s_state_name [self->state]);
            zsys_debug ("$(class.name):     %s", s_event_name [self->event]);
        }
        switch (self->state) {
.for class.state
.   if index () > 1

.   endif
            case $(name:c)_state:
.   for event where name <> "*"
.       if index () > 1
                else
.       endif
                if (self->event == $(name)_event) {
.       output_action_body ()
                }
.   endfor
.   for event where name = "*"
.       if item () > 1
                else {
.       else
                {
.       endif
                    //  Handle unexpected protocol events
.       output_action_body ()
                }
.   else
                else {
                    //  Handle unexpected internal events
                    zsys_warning ("$(class.name): unhandled event %s in %s",
                        s_event_name [self->event], s_state_name [self->state]);
                    assert (false);
                }
.   endfor
                break;
.endfor
        }
        //  If we had an exception event, interrupt normal programming
        if (self->exception) {
            if (self->verbose)
                zsys_debug ("$(class.name):         ! %s", s_event_name [self->exception]);
            self->next_event = self->exception;
        }
        else
        if (self->verbose)
            zsys_debug ("$(class.name):         > %s", s_state_name [self->state]);
    }
}

.if count (class.event, name = "expired")
//  zloop callback when client inactivity timer expires

static int
s_client_handle_timeout (zloop_t *loop, int timer_id, void *argument)
{
    s_client_t *self = (s_client_t *) argument;
    s_client_execute (self, expired_event);
    return self->terminated? -1: 0;
}

.endif
//  zloop callback when client wakeup timer expires

static int
s_client_handle_wakeup (zloop_t *loop, int timer_id, void *argument)
{
    s_client_t *self = (s_client_t *) argument;
    s_client_execute (self, self->wakeup_event);
    return 0;
}


//  Handle command pipe to/from calling API

static int
s_client_handle_cmdpipe (zloop_t *loop, zsock_t *reader, void *argument)
{
    s_client_t *self = (s_client_t *) argument;
    char *method = zstr_recv (self->cmdpipe);
    if (!method)
        return -1;                  //  Interrupted; exit zloop
    if (self->verbose)
        zsys_debug ("$(class.name):     API command=%s", method);

    if (streq (method, "VERBOSE"))
        self->verbose = true;       //  Start verbose logging
    else
    if (streq (method, "$TERM"))
        self->terminated = true;    //  Shutdown the engine
.for class.method where immediate = 0
    else
    if (streq (method, "$(NAME)")) {
.   if pattern <> ""
.       for field where type = "string"
        zstr_free (&self->args.$(name));
.       endfor
        zsock_recv (self->cmdpipe, "$(pattern)"\
.       for field
, &self->args.$(name)\
.       endfor
);
.   endif
        s_client_execute (self, $(name:c)_event);
    }
.endfor
    //  Cleanup pipe if any argument frames are still waiting to be eaten
    if (zsock_rcvmore (self->cmdpipe)) {
        zsys_error ("$(class.name): trailing API command frames (%s)", method);
        zmsg_t *more = zmsg_recv (self->cmdpipe);
        zmsg_print (more);
        zmsg_destroy (&more);
    }
    zstr_free (&method);
    return self->terminated? -1: 0;
}


//  Handle message pipe to/from calling API

static int
s_client_handle_msgpipe (zloop_t *loop, zsock_t *reader, void *argument)
{
    s_client_t *self = (s_client_t *) argument;

    //  We will process as many messages as we can, to reduce the overhead
    //  of polling and the reactor:
    while (zsock_events (self->msgpipe) & ZMQ_POLLIN) {
        char *method = zstr_recv (self->msgpipe);
        if (!method)
            return -1;              //  Interrupted; exit zloop
        if (self->verbose)
            zsys_debug ("$(class.name):     API message=%s", method);

.for class.send
.   for message as method
.       if index () > 1
        else
.       endif
        if (streq (method, "$(NAME)")) {
.       for field
            $(ctype)$(name);
.       endfor
            zsock_brecv (self->msgpipe, "$(pattern:)"\
.       for field
, &$(name)\
.       endfor
);
            $(proto)_set_id (self->message, $(PROTO)_$(CNAME));
.       for field
.           if type = "string" | type = "number"
            $(proto)_set_$(name) (self->message, $(name));
.           else
            $(proto)_set_$(name) (self->message, &$(name));
.           endif
.       endfor
            $(proto)_send (self->message, self->dealer);
        }
.   endfor
.endfor
        //  Cleanup pipe if any argument frames are still waiting to be eaten
        if (zsock_rcvmore (self->msgpipe)) {
            zsys_error ("$(class.name): trailing API message frames (%s)", method);
            zmsg_t *more = zmsg_recv (self->msgpipe);
            zmsg_print (more);
            zmsg_destroy (&more);
        }
        zstr_free (&method);
    }
    return 0;
}


//  Handle a message (a protocol reply) from the server

static int
s_client_handle_protocol (zloop_t *loop, zsock_t *reader, void *argument)
{
    s_client_t *self = (s_client_t *) argument;

    //  We will process as many messages as we can, to reduce the overhead
    //  of polling and the reactor:
    while (zsock_events (self->dealer) & ZMQ_POLLIN) {
        if ($(proto)_recv (self->message, self->dealer))
            return -1;              //  Interrupted; exit zloop

.if switches.trace ?= 1
        zsys_debug ("Server message");
        $(proto)_print (self->message);
.endif
.if count (class.event, name = "expired")
        //  Any input from server counts as activity
        if (self->expiry_timer) {
            zloop_timer_end (self->loop, self->expiry_timer);
            self->expiry_timer = 0;
        }
        //  Reset expiry timer if timeout is not zero
        if (self->timeout)
            self->expiry_timer = zloop_timer (
                self->loop, self->timeout, 1, s_client_handle_timeout, self);
.endif
        s_client_execute (self, s_protocol_event (self, self->message));
        if (self->terminated)
            return -1;
    }
    return 0;
}


//  ---------------------------------------------------------------------------
//  This is the client actor, which polls its two sockets and processes
//  incoming messages

void
$(class.name) (zsock_t *cmdpipe, void *msgpipe)
{
    //  Initialize
    s_client_t *self = s_client_new (cmdpipe, (zsock_t *) msgpipe);
    if (self) {
        zsock_signal (cmdpipe, 0);
        
        //  Set up handler for the sockets the client uses
        engine_handle_socket ((client_t *) self, self->cmdpipe, s_client_handle_cmdpipe);
        engine_handle_socket ((client_t *) self, self->msgpipe, s_client_handle_msgpipe);
        engine_handle_socket ((client_t *) self, self->dealer, s_client_handle_protocol);

        //  Run reactor until there's a termination signal
        zloop_start (self->loop);

        //  Reactor has ended
        s_client_destroy (&self);
    }
    else
        zsock_signal (cmdpipe, -1);
}


//  ---------------------------------------------------------------------------
//  Class interface

struct _$(class.name)_t {
    zactor_t *actor;            //  Client actor
    zsock_t *msgpipe;           //  Pipe for async message flow
.for class.property
.   if type = "string"
    char *$(name);              //  Returned by actor reply
.   elsif type = "number"
    int $(name);                //  Returned by actor reply
.   elsif type = "msg"
    zmsg_t *$(name);            //  Returned by actor reply
.   endif
.endfor
};


//  ---------------------------------------------------------------------------
//  Create a new $(class.name)
.for class.method where name = "constructor"
//  $(method.?'No explanation':justify,block%-80s)

static $(ctype)
$(class.name)_$(name:c) ($(class.name)_t *self, $(args));

$(CLASS.EXPORT_MACRO)$(class.name)_t *
$(class.name)_new ($(args))
.else

$(CLASS.EXPORT_MACRO)$(class.name)_t *
$(class.name)_new (void)
.endfor
{
    $(class.name)_t *self = ($(class.name)_t *) zmalloc (sizeof ($(class.name)_t));
    if (self) {
        zsock_t *backend;
        self->msgpipe = zsys_create_pipe (&backend);
        self->actor = zactor_new ($(class.name), backend);
.for class.method where name = "constructor"
        if (self->actor)
            $(return) = $(class.name)_constructor (self\
.       for field
, $(name:c)\
.       endfor
);
        if ($(return) == -1)
            zactor_destroy (&self->actor);
.endfor
        if (!self->actor)
            $(class.name)_destroy (&self);
    }
    return self;
}


//  ---------------------------------------------------------------------------
//  Destroy the $(class.name)
.for class.method where name = "destructor"
//  $(method.?'No explanation':justify,block%-80s)

static $(ctype)
$(class.name)_$(name:c) ($(class.name)_t *self);
.endfor

void
$(class.name)_destroy ($(class.name)_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        $(class.name)_t *self = *self_p;
.for class.method where name = "constructor"
        if (self->actor)
            $(class.name)_destructor (self);
.endfor
        zactor_destroy (&self->actor);
        zsock_destroy (&self->msgpipe);
.for class.property
.   if type = "string" & alloc
        zstr_free (&self->$(name));
.   elsif type = "chunk" | type = "frame" | type = "msg"
        z$(type)_destroy (&self->$(name));
.   endif
.endfor
        free (self);
        *self_p = NULL;
    }
}


//  ---------------------------------------------------------------------------
//  Enable verbose logging of client activity

void
$(class.name)_verbose ($(class.name)_t *self)
{
    assert (self);
    zsock_send (self->actor, "s", "VERBOSE");
}


//  ---------------------------------------------------------------------------
//  Return message pipe for asynchronous message I/O. In the high-volume case,
//  we send methods and get replies to the actor, in a synchronous manner, and
//  we send/recv high volume message data to a second pipe, the msgpipe. In
//  the low-volume case we can do everything over the actor pipe, if traffic
//  is never ambiguous.

zsock_t *
$(class.name)_msgpipe ($(class.name)_t *self)
{
    assert (self);
    return self->msgpipe;
}
.if count (class.reply)


//  ---------------------------------------------------------------------------
//  Get valid reply from actor; discard replies that does not match. Current
//  implementation filters on first frame of message. Blocks until a valid
//  reply is received, and properties can be loaded from it. Returns 0 if
//  matched, -1 if interrupted or timed-out.

static int
s_accept_reply ($(class.name)_t *self, ...)
{
    assert (self);
    while (true) {
        char *reply = zstr_recv (self->actor);
        if (!reply)
            return -1;          //  Interrupted or timed-out
        
        va_list args;
        va_start (args, self);
        char *filter = va_arg (args, char *);
        while (filter) {
            if (streq (reply, filter)) {
.for class.reply
.   if index () > 1
                else
.   endif
                if (streq (reply, "$(reply.name:)")) {
.   for field where type = "string"
                    zstr_free (&self->$(name:c));
.   endfor
                    zsock_recv (self->actor, "$(reply.pattern:)"\
.   for field
, &self->$(name:c)\
.   endfor
);
                }
.endfor
                break;
            }
            filter = va_arg (args, char *);
        }
        va_end (args);
        //  If anything was remaining on pipe, flush it
        zsock_flush (self->actor);
        if (filter) {
            zstr_free (&reply);
            return 0;           //  We matched one of the filters
        }
    }
}
.endif
.for class.method


//  ---------------------------------------------------------------------------
//  $(method.?'No explanation':justify,block%-80s)
.   if count (method.accept)
.       if method.ctype = "int"
//  Returns >= 0 if successful, -1 if interrupted.
.       else
//  Returns NULL on an interrupt.
.       endif
.   endif

.   if name = "constructor"
static $(ctype)
$(class.name)_$(name:c) ($(class.name)_t *self, $(args))
.   else
$(ctype)
$(class.name)_$(name:c) ($(class.name)_t *self$(args))
.   endif
{
    assert (self);
.   if method.immediate = 0
    zsock_send (self->actor, "s$(pattern)", "$(NAME)"\
.       for field
, $(name)\
.       endfor
);
.   endif
.   if count (method.accept)
    if (s_accept_reply (self\
.       for method.accept
, "$(accept.reply:)"\
.       endfor
, NULL))
.       if method.ctype = "int"
        return -1;              //  Interrupted or timed-out
.       else
        return NULL;            //  Interrupted or timed-out
.       endif
.   endif
.   if defined (method.return)
    return $(return);
.   endif
}
.endfor
.for class.send
.   for message as method


//  ---------------------------------------------------------------------------
//  Send $(name:) message to server

int
$(class.name)_$(name:c) ($(class.name)_t *self$(args))
{
    assert (self);
    //  Send message name as first, separate frame
    zstr_sendm (self->msgpipe, "$(NAME)");
    int rc = zsock_bsend (self->msgpipe, "$(pattern:)"\
.       for field
.           if type = "chunk" | type = "frame" | type = "msg"
, *$(name)_p\
.           else
, $(name)\
.           endif
.       endfor
);
.       for field where type = "chunk" | type = "frame" | type = "msg"
    *$(name)_p = NULL;          //  Take ownership of $(name)
.       endfor
    return rc;
}
.   endfor
.endfor
.for class.recv


//  ---------------------------------------------------------------------------
//  Receive message from server; caller destroys message when done

zmsg_t *
$(class.name)_recv ($(class.name)_t *self)
{
    zstr_free (&self->command);
    self->command = zstr_recv (self->msgpipe);
    if (!self->command)
        return NULL;            //  Interrupted

.   for message as method
.   if index () > 1
    else
.   endif
    if (streq (self->command, "$(NAME)")) {
        zmsg_destroy (&self->$(return));
        zsock_brecv (self->msgpipe, "$(pattern:)"\
.       for field
, &self->$(name)\
.       endfor
);
        return self->$(return);
    }
.   endfor
    return NULL;
}
.endfor
.for class.property


//  ---------------------------------------------------------------------------
//  Return last received $(name)

$(ctype)
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}
.endfor
.#  Generate source file first time only
.source_file = "$(class.name).c"
.if !file.exists (source_file)
.   output source_file
/*  =========================================================================
    $(class.name) - $(class.title:)

.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

/*
@header
    Description of class for man page.
@discuss
    Detailed discussion of the class, if any.
@end
*/

.if defined (class.project_header)
#include "$(class.project_header)"
.endif
//  TODO: Change these to match your project's needs
#include "$(class.package_dir)/$(class.protocol_class).h"
#include "$(class.package_dir)/$(class.name).h"

//  Forward reference to method arguments structure
typedef struct _client_args_t client_args_t;

//  This structure defines the context for a client connection
typedef struct {
    //  These properties must always be present in the client_t
    //  and are set by the generated engine. The cmdpipe gets
    //  messages sent to the actor; the msgpipe may be used for
    //  faster asynchronous message flows.
    zsock_t *cmdpipe;           //  Command pipe to/from caller API
    zsock_t *msgpipe;           //  Message pipe to/from caller API
    zsock_t *dealer;            //  Socket to talk to server
    $(proto)_t *message;        //  Message to/from server
    client_args_t *args;        //  Arguments from methods
    
    //  TODO: Add specific properties for your application
} client_t;

//  Include the generated client engine
#include "$(class.name)_engine.inc"

//  Allocate properties and structures for a new client instance.
//  Return 0 if OK, -1 if failed

static int
client_initialize (client_t *self)
{
    return 0;
}

//  Free properties and structures for a client instance

static void
client_terminate (client_t *self)
{
    //  Destroy properties here
}


//  ---------------------------------------------------------------------------
//  Selftest

void
$(class.name)_test (bool verbose)
{
    printf (" * $(class.name): ");
    if (verbose)
        printf ("\\n");
    
    //  @selftest
    zactor_t *client = zactor_new ($(class.name), NULL);
    if (verbose)
        zstr_send (client, "VERBOSE");
    zactor_destroy (&client);
    //  @end
    printf ("OK\\n");
}
.endif
.close
.template 0

#   Append missing prototypes to source file
input = file.open (source_file)
xline = file.read (input)
while defined (xline)
    #   Look for function declarations
    if regexp.match ("^(\\w+) \\(", xline, token)
        for class.prototype where name = token
            prototype.exists = 1
        endfor
    endif
    xline = file.read (input)?
endwhile
file.close (input)

append source_file
for class.prototype where exists = 0
    echo "Generating stub for $(name)..."
    >
    >
    >//  ---------------------------------------------------------------------------
    >//  $(name)
    >//
    >
    >static $(ctype)
    >$(name) ($(args))
    >{
    if ctype = "int"
        >    return 0;
    elsif ctype = "char *"
        >    return NULL
    else
        >
    endif
    >}
endfor
.endtemplate
