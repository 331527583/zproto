.template 0
#   zproto_codec_c.gsl
#
#   Generates a codec for a protocol specification
#
include "zproto_lib.gsl"
include "zproto_lib_go.gsl"
include "zproto_bnf.gsl"
resolve_includes ()
expand_headers ()
generate_bnf ()
set_defaults ()
.endtemplate

.output "$(go_package_path())/$(go_package_name()).go"
// Package $(go_package_name()) is 100% generated. If you edit this file,
// you will lose your changes at the next build cycle.
// DO NOT MAKE ANY CHANGES YOU WISH TO KEEP.
//
// The correct places for commits are:
//  - The XML model used for this code generation: $(filename)
//  - The code generation script that built this file: $(script)
package $(go_package_name())

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"

.if class.package = "github.com/pebbe/zmq4"
	zmq "github.com/pebbe/zmq4"
.elsif class.package = "github.com/zeromq/goczmq"
	"github.com/zeromq/goczmq"
.endif
)

.const_maxlen = 16 # 16 is number of characters of Signature and its type
.for define
.    if const_maxlen < string.length($(define.Name:c))
.        const_maxlen = string.length($(define.Name:c))
.    endif
.endfor
const (
	Signature uint16 = 0xAAA0 | $(class.signature)
.for define
	$(define.Name:c%-$(const_maxlen)s) = $(value)
.endfor
)

.id_maxlen = 0
.for message
.    message.origname = message.name
.    message.name = go_name(message.name)
.    if id_maxlen < string.length(message.name)+2
.        id_maxlen = string.length(message.name)+2
.    endif
.endfor
const (
.for message
	$("$(name:no)Id"%-$(id_maxlen)s) uint8 = $(id)
.endfor
)

// Transit is a codec interface
type Transit interface {
	Marshal() ([]byte, error)
	Unmarshal(...[]byte) error
	String() string
.if class.package = "github.com/pebbe/zmq4"
	Send(*zmq.Socket) error
.elsif class.package = "github.com/zeromq/goczmq"
	Send(*goczmq.Sock) error
.endif
	SetRoutingId([]byte)
	RoutingId() []byte
.for field where defined(in_header)
	Set$(fname:no)($(gotype))
	$(fname:no)() $(gotype)
.endfor
}

// Unmarshal unmarshals data from raw frames.
func Unmarshal(frames ...[]byte) (t Transit, err error) {
	if frames == nil {
		return nil, errors.New("can't unmarshal an empty message")
	}
	var buffer *bytes.Buffer

	// Check the signature
	var signature uint16
	buffer = bytes.NewBuffer(frames[0])
	binary.Read(buffer, binary.BigEndian, &signature)
	if signature != Signature {
		// Invalid signature
		return nil, fmt.Errorf("invalid signature %X != %X", Signature, signature)
	}

	// Get message id and parse per message type
	var id uint8
	binary.Read(buffer, binary.BigEndian, &id)

	switch id {
.for message
	case $(name:no)Id:
		t = New$(name:no)()
.endfor
	}
	err = t.Unmarshal(frames...)

	return t, err
}

.if class.package = "github.com/pebbe/zmq4"
// Recv receives marshaled data from a 0mq socket.
func Recv(socket *zmq.Socket) (t Transit, err error) {
	return recv(socket, 0)
}

// RecvNoWait receives marshaled data from 0mq socket. It won't wait for input.
func RecvNoWait(socket *zmq.Socket) (t Transit, err error) {
	return recv(socket, zmq.DONTWAIT)
}

.elsif class.package = "github.com/zeromq/goczmq"
// Recv receives marshaled data from a 0mq socket.
func Recv(sock *goczmq.Sock) (t Transit, err error) {
	return recv(sock, 0)
}

// RecvNoWait receives marshaled data from 0mq socket. It won't wait for input.
func RecvNoWait(sock *goczmq.Sock) (t Transit, err error) {
	return recv(sock, goczmq.DONTWAIT)
}

.endif
// recv receives marshaled data from 0mq socket.
.if class.package = "github.com/pebbe/zmq4"
func recv(socket *zmq.Socket, flag zmq.Flag) (t Transit, err error) {
	// Read all frames
	frames, err := socket.RecvMessageBytes(flag)
.elsif class.package = "github.com/zeromq/goczmq"
func recv(sock *goczmq.Sock, flag goczmq.Flag) (t Transit, err error) {
	var frames [][]byte

	if flag == goczmq.DONTWAIT {
		frames, err = sock.RecvMessageNoWait()
	} else {
		frames, err = sock.RecvMessage()
	}

.endif
	if err != nil {
		return nil, err
	}

.if class.package = "github.com/pebbe/zmq4"
	sType, err := socket.GetType()
.elsif class.package = "github.com/zeromq/goczmq"
	sType := sock.GetType()
.endif
	if err != nil {
		return nil, err
	}

	var routingId []byte
	// If message came from a router socket, first frame is routingId
.if class.package = "github.com/pebbe/zmq4"
	if sType == zmq.ROUTER {
.elsif class.package = "github.com/zeromq/goczmq"
	if sType == goczmq.ROUTER {
.endif
		if len(frames) <= 1 {
			return nil, errors.New("no routingId")
		}
		routingId = frames[0]
		frames = frames[1:]
	}

	t, err = Unmarshal(frames...)
	if err != nil {
		return nil, err
	}

.if class.package = "github.com/pebbe/zmq4"
	if sType == zmq.ROUTER {
.elsif class.package = "github.com/zeromq/goczmq"
	if sType == goczmq.ROUTER {
.endif
		t.SetRoutingId(routingId)
	}
	return t, err
}

// Clone clones a message.
func Clone(t Transit) Transit {

	switch msg := t.(type) {
.for message
	case *$(name:no):
		cloned := New$(name:no)()
		routingId := make([]byte, len(msg.RoutingId()))
		copy(routingId, msg.RoutingId())
		cloned.SetRoutingId(routingId)
.    for field
.       if type = "hash"
		for key, val := range msg.$(name:no) {
			cloned.$(name:no)[key] = val
		}
.       elsif type = "strings"
		for idx, str := range msg.$(name:no) {
			cloned.$(name:no)[idx] = str
		}
.       elsif type = "octets"
		copy(cloned.$(name:no), msg.$(name:no))
.       elsif type = "chunk" | type = "uuid" | type = "frame" | type = "msg"
		cloned.$(name:no) = append(cloned.$(name:no), msg.$(name:no)...)
.       else
		cloned.$(name:no) = msg.$(name:no)
.       endif
.    endfor
		return cloned
.    if last ()
.    else

.endif
.endfor
	}

	return nil
}

// putString marshals a string into the buffer.
func putString(buffer *bytes.Buffer, str string) {
	size := len(str)
	binary.Write(buffer, binary.BigEndian, byte(size))
	binary.Write(buffer, binary.BigEndian, []byte(str[0:size]))
}

// getString unmarshals a string from the buffer.
func getString(buffer *bytes.Buffer) string {
	var size byte
	binary.Read(buffer, binary.BigEndian, &size)
	str := make([]byte, size)
	binary.Read(buffer, binary.BigEndian, &str)
	return string(str)
}

// putLongString marshals a string into the buffer.
func putLongString(buffer *bytes.Buffer, str string) {
	size := len(str)
	binary.Write(buffer, binary.BigEndian, uint32(size))
	binary.Write(buffer, binary.BigEndian, []byte(str[0:size]))
}

// getLongString unmarshals a string from the buffer.
func getLongString(buffer *bytes.Buffer) string {
	var size uint32
	binary.Read(buffer, binary.BigEndian, &size)
	str := make([]byte, size)
	binary.Read(buffer, binary.BigEndian, &str)
	return string(str)
}

// putBytes marshals []byte into the buffer.
func putBytes(buffer *bytes.Buffer, data []byte) {
	size := uint64(len(data))
	binary.Write(buffer, binary.BigEndian, size)
	binary.Write(buffer, binary.BigEndian, data)
}

// getBytes unmarshals []byte from the buffer.
func getBytes(buffer *bytes.Buffer) []byte {
	var size uint64
	binary.Read(buffer, binary.BigEndian, &size)
	data := make([]byte, size)
	binary.Read(buffer, binary.BigEndian, &data)
	return data
}
.#
.# Each message is in a separate file
.#
.for message
.output "$(go_package_path())/$(origname).go"
package $(go_package_name())

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
.if defined(message.strconv)
	"strconv"
.endif

.if class.package = "github.com/pebbe/zmq4"
	zmq "github.com/pebbe/zmq4"
.elsif class.package = "github.com/zeromq/goczmq"
	"github.com/zeromq/goczmq"
.endif
)

// $(string.trim (.?''):left)
type $(name:no) struct {
	$("routingId"%-$(field_maxlen + 1)s)[]byte
.for field
.   if defined(in_header)
	$(name%-$(field_maxlen + 1)s)$(gotype)
.   else
	$(name:no%-$(field_maxlen + 1)s)$(gotype)
.   endif
.endfor
}
.self = string.substr(name,0,0)

// New creates new $(name:no) message.
func New$(name:no)() *$(name:no) {
	$(name) := &$(name:no){}
.struct = "$(name)"
.for field where type = "hash"
	$(struct).$(name:no) = make(map[string]string)
.endfor
	return $(name)
}

// String returns print friendly name.
func ($(self) *$(name:no)) String() string {
	str := "$(CLASS.NAME)_$(NAME):\\n"
.for field
	str += fmt.Sprintf("    $(name:no) = %v\\n", $(self).$(name:no))
.endfor
	return str
}

// Marshal serializes the message.
func ($(self) *$(name:no)) Marshal() ([]byte, error) {
	// Calculate size of serialized data
	bufferSize := 2 + 1 // Signature and message ID
.for field
.    if type = "number"

	// $(name:no) is a $(size)-byte integer
	bufferSize += $(size)
.    elsif type = "octets"

	// $(name:no) is a block of [$(size)]byte
	bufferSize += $(size)
.    elsif type = "chunk" | type = "uuid" | type = "frame" | type = "msg"

	// $(name:no) is a block of []byte with one byte length
	bufferSize += 1 + len($(self).$(name:no))
.    elsif type = "string"

	// $(name:no) is a string with 1-byte length
.        if defined (field.value)
	bufferSize += 1 + len("$(field.value:)")
.        else
	bufferSize++ // Size is one byte
	bufferSize += len($(self).$(name:no))
.        endif
.    elsif type = "longstr"

	// $(name:no) is a string with 4-byte length
.        if defined (field.value)
	bufferSize += 4 + len("$(field.value:)")
.        else
	bufferSize += 4 // Size is 4 bytes
	bufferSize += len($(self).$(name:no))
.        endif
.    elsif type = "strings"

	// $(name:no) is an array of strings
	bufferSize += 4 // Size is 4 bytes
	// Add up size of string contents
	for _, val := range $(self).$(name:no) {
		bufferSize += 4 + len(val)
	}
.    elsif type = "hash"

	// $(name:no) is a hash table
	bufferSize += 4 // Size is 4 bytes
	for key, val := range $(self).$(name:no) {
		bufferSize += 1 + len(key)
		bufferSize += 4 + len(val)
	}
.    endif
.endfor

	// Now serialize the message
	tmpBuf := make([]byte, bufferSize)
	tmpBuf = tmpBuf[:0]
	buffer := bytes.NewBuffer(tmpBuf)
	binary.Write(buffer, binary.BigEndian, Signature)
	binary.Write(buffer, binary.BigEndian, $(name:no)Id)
.for field
.    if type = "number"

	// $(name:no)
.        if defined (field.value)
	value, _ := strconv.ParseUint("$(field.value:)", 10, $(size)*8)
	binary.Write(buffer, binary.BigEndian, $(gotype)(value))
.        else
	binary.Write(buffer, binary.BigEndian, $(self).$(name:no))
.        endif
.    elsif type = "octets"

	// $(name:no)
	binary.Write(buffer, binary.BigEndian, $(self).$(name:no)[:$(size)])
.    elsif type = "chunk" | type = "uuid" | type = "frame" | type = "msg"

	putBytes(buffer, $(self).$(name:no))
.    elsif type = "string"

	// $(name:no)
.        if defined (field.value)
	putString(buffer, "$(field.value:)")
.        else
	putString(buffer, $(self).$(name:no))
.        endif
.    elsif type = "longstr"

	// $(name:no)
.        if defined (field.value)
	putLongString(buffer, "$(field.value:)")
.        else
	putLongString(buffer, $(self).$(name:no))
.        endif
.    elsif type = "strings"

	// $(name:no)
	binary.Write(buffer, binary.BigEndian, uint32(len($(self).$(name:no))))
	for _, val := range $(self).$(name:no) {
		putLongString(buffer, val)
	}
.    elsif type = "hash"

	// $(name:no)
	binary.Write(buffer, binary.BigEndian, uint32(len($(self).$(name:no))))
	for key, val := range $(self).$(name:no) {
		putString(buffer, key)
		putLongString(buffer, val)
	}
.    endif
.endfor

	return buffer.Bytes(), nil
}

// Unmarshal unmarshals the message.
func ($(self) *$(name:no)) Unmarshal(frames ...[]byte) error {
	if frames == nil {
		return errors.New("Can't unmarshal empty message")
	}

	frame := frames[0]
	frames = frames[1:]

	buffer := bytes.NewBuffer(frame)

	// Get and check protocol signature
	var signature uint16
	binary.Read(buffer, binary.BigEndian, &signature)
	if signature != Signature {
		return fmt.Errorf("invalid signature %X != %X", Signature, signature)
	}

	// Get message id and parse per message type
	var id uint8
	binary.Read(buffer, binary.BigEndian, &id)
	if id != $(name:no)Id {
		return errors.New("malformed $(name:no) message")
	}
.frames = 0
.for field
	// $(name:no)
.    if type = "number"
	binary.Read(buffer, binary.BigEndian, &$(self).$(name:no))
.        if defined (field.value)
	if $(self).$(name:no) != $(field.value:) {
		return errors.New("malformed $(name:no) message")
	}
.        endif
.    elsif type = "octets"

	$(self).$(name:no) = make($(gotype), $(size))
	binary.Read(buffer, binary.BigEndian, &$(self).$(name:no))
.    elsif type = "uuid" | type = "chunk" | type = "frame" | type = "msg"

	$(self).$(name:no) = getBytes(buffer)
.    elsif type = "string"
	$(self).$(name:no) = getString(buffer)
.        if defined (field.value)
	if $(self).$(name:no) != "$(field.value:)" {
		return errors.New("malformed $(name:no) message")
	}
.        endif
.    elsif type = "longstr"
	$(self).$(name:no) = getLongString(buffer)
.        if defined (field.value)
	if $(self).$(name:no) != "$(field.value:)" {
		return errors.New("malformed $(name:no) message")
	}
.        endif
.    elsif type = "strings"
.        _size = "$(name)Size"
	var $(_size:no) uint32
	binary.Read(buffer, binary.BigEndian, &$(_size:no))
	for ; $(_size:no) != 0; $(_size:no)-- {
		$(self).$(name:no) = append($(self).$(name:no), getLongString(buffer))
	}
.    elsif type = "hash"
.        _size = "$(name)Size"
	var $(_size:no) uint32
	binary.Read(buffer, binary.BigEndian, &$(_size:no))
	for ; $(_size:no) != 0; $(_size:no)-- {
		key := getString(buffer)
		val := getLongString(buffer)
		$(self).$(name:no)[key] = val
	}
.    elsif type = "frame" | type = "msg"
	if $(frames) <= len(frames)-1 {
		$(self).$(name:no) = frames[$(frames)]
	}
.    frames = frames + 1
.    endif
.endfor

	return nil
}

// Send sends marshaled data through 0mq socket.
.if class.package = "github.com/pebbe/zmq4"
func ($(self) *$(name:no)) Send(socket *zmq.Socket) (err error) {
.elsif class.package = "github.com/zeromq/goczmq"
func ($(self) *$(name:no)) Send(sock *goczmq.Sock) (err error) {
.endif
	frame, err := $(self).Marshal()
	if err != nil {
		return err
	}

.if class.package = "github.com/pebbe/zmq4"
	socType, err := socket.GetType()
.elsif class.package = "github.com/zeromq/goczmq"
	socType := sock.GetType()
.endif
	if err != nil {
		return err
	}

	// If we're sending to a ROUTER, we send the routingId first
.if class.package = "github.com/pebbe/zmq4"
	if socType == zmq.ROUTER {
		_, err = socket.SendBytes($(self).routingId, zmq.SNDMORE)
		if err != nil {
			return err
		}
	}
.elsif class.package = "github.com/zeromq/goczmq"
	if socType == goczmq.ROUTER {
		err = sock.SendFrame($(self).routingId, goczmq.MORE)
		if err != nil {
			return err
		}
	}
.endif

	// Now send the data frame
.if !count (field, type = "frame") & !count (field, type = "msg")
.if class.package = "github.com/pebbe/zmq4"
	_, err = socket.SendBytes(frame, 0)
.elsif class.package = "github.com/zeromq/goczmq"
	err = sock.SendFrame(frame, 0)
.endif
.else
.if class.package = "github.com/pebbe/zmq4"
	_, err = socket.SendBytes(frame, zmq.SNDMORE)
.elsif class.package = "github.com/zeromq/goczmq"
	err = sock.SendFrame(frame, goczmq.MORE)
.endif
.endif
	if err != nil {
		return err
	}
.if count (field, type = "frame") | count (field, type = "msg")
	// Now send any frame fields, in order
.endif
.for field where type = "frame" | type = "msg"
.    if last ()
.if class.package = "github.com/pebbe/zmq4"
	_, err = socket.SendBytes($(self).$(name:no), 0)
.elsif class.package = "github.com/zeromq/goczmq"
	err = sock.SendFrame($(self).$(name:no), 0)
.endif
.    else
.if class.package = "github.com/pebbe/zmq4"
	_, err = socket.SendBytes($(self).$(name:no), zmq.SNDMORE)
.elsif class.package = "github.com/zeromq/goczmq"
	err = sock.SendFrame($(self).$(name:no), goczmq.MORE)
.endif
.    endif
.endfor

	return err
}

// RoutingId returns the routingId for this message, routingId should be set
// whenever talking to a ROUTER.
func ($(self) *$(name:no)) RoutingId() []byte {
	return $(self).routingId
}

// SetRoutingId sets the routingId for this message, routingId should be set
// whenever talking to a ROUTER.
func ($(self) *$(name:no)) SetRoutingId(routingId []byte) {
	$(self).routingId = routingId
}
.struct = "$(name:no)"
.for field where defined(in_header)

// Set$(name:no) sets the $(name).
func ($(self) *$(struct:no)) Set$(fname:no)($(name) $(gotype)) {
	$(self).$(name) = $(name)
}

// $(name:no) returns the $(name).
func ($(self) *$(struct:no)) $(fname:no)() $(gotype) {
	return $(self).$(name)
}
.endfor
.output "$(go_package_path())/$(origname)_test.go"
package $(go_package_name())

import (
	"testing"

.if class.package = "github.com/pebbe/zmq4"
	zmq "github.com/pebbe/zmq4"
.elsif class.package = "github.com/zeromq/goczmq"
	"github.com/zeromq/goczmq"
.endif
)

// Yay! Test function.
func Test$(name:no)(t *testing.T) {

	// Create pair of sockets we can send through

	// Output socket
.if class.package = "github.com/pebbe/zmq4"
	output, err := zmq.NewSocket(zmq.DEALER)
	if err != nil {
		t.Fatal(err)
	}
	defer output.Close()
.elsif class.package = "github.com/zeromq/goczmq"
	output := goczmq.NewSock(goczmq.DEALER)
	defer output.Destroy()
.endif

	routingId := "Shout"
	output.SetIdentity(routingId)
.if class.package = "github.com/pebbe/zmq4"
	err = output.Bind("inproc://selftest-$(name)")
.elsif class.package = "github.com/zeromq/goczmq"
	_, err := output.Bind("inproc://selftest-$(name)")
.endif
	if err != nil {
		t.Fatal(err)
	}
	defer output.Unbind("inproc://selftest-$(name)")

	// Input socket
.if class.package = "github.com/pebbe/zmq4"
	input, err := zmq.NewSocket(zmq.ROUTER)
	if err != nil {
		t.Fatal(err)
	}
	defer input.Close()
.elsif class.package = "github.com/zeromq/goczmq"
	input := goczmq.NewSock(goczmq.ROUTER)
	defer input.Destroy()
.endif

	err = input.Connect("inproc://selftest-$(name)")
	if err != nil {
		t.Fatal(err)
	}
	defer input.Disconnect("inproc://selftest-$(name)")

	// Create a $(Name) message and send it through the wire
	$(name) := New$(name:no)()
.   struct = "$(name)"
.   for field where !defined (value)
.       if type = "number"

	$(struct).$(name:no) = 123
.       elsif type = "octets"
.           data = "'z', " * size
.           data_len = string.length(data)
.           data = string.substr(data, 0, data_len-3)

	$(struct).$(name:no) = []byte{$(data)}
.       elsif type = "string" | type = "longstr"

	$(struct).$(name:no) = "Life is short but Now lasts for ever"
.       elsif type = "strings"

	$(struct).$(name:no) = []string{"Name: Brutus", "Age: 43"}
.       elsif type = "hash"

	$(struct).$(name:no) = map[string]string{"Name": "Brutus", "Age": "43"}
.       elsif type = "uuid" | type = "chunk" | type = "frame" | type = "msg"

	$(struct).$(name:no) = []byte("Captcha Diem")
.       endif
.   endfor

	err = $(name).Send(output)
	if err != nil {
		t.Fatal(err)
	}
	transit, err := Recv(input)
	if err != nil {
		t.Fatal(err)
	}

	tr := transit.(*$(name:no))
.   for field where !defined (value)
.       if type = "number"

	if tr.$(name:no) != 123 {
		t.Fatalf("expected %d, got %d", 123, tr.$(name:no))
	}
.       elsif type = "octets"
.           data = "'z', " * size
.           data_len = string.length(data)
.           data = string.substr(data, 0, data_len-3)

	if len(tr.$(name:no)) != $(size) {
		t.Fatalf("mismatch octets size for %s", "$(name:no)")
	}
	for idx, b := range []byte{$(data)} {
		if tr.$(name:no)[idx] != b {
			t.Fatalf("mismatch octets value for %s", "$(name:no)")
		}
	}
.       elsif type = "string" | type = "longstr"

	if tr.$(name:no) != "Life is short but Now lasts for ever" {
		t.Fatalf("expected %s, got %s", "Life is short but Now lasts for ever", tr.$(name:no))
	}
.       elsif type = "strings"

	for idx, str := range []string{"Name: Brutus", "Age: 43"} {
		if tr.$(name:no)[idx] != str {
			t.Fatalf("expected %s, got %s", str, tr.$(name:no)[idx])
		}
	}
.       elsif type = "hash"

	for key, val := range map[string]string{"Name": "Brutus", "Age": "43"} {
		if tr.$(name:no)[key] != val {
			t.Fatalf("expected %s, got %s", val, tr.$(name:no)[key])
		}
	}
.       elsif type = "uuid" | type = "chunk" | type = "frame" | type = "msg"

	if string(tr.$(name:no)) != "Captcha Diem" {
		t.Fatalf("expected %s, got %s", "Captcha Diem", tr.$(name:no))
	}
.       endif
.   endfor

	err = tr.Send(input)
	if err != nil {
		t.Fatal(err)
	}

	transit, err = Recv(output)
	if err != nil {
		t.Fatal(err)
	}

	if routingId != string(tr.RoutingId()) {
		t.Fatalf("expected %s, got %s", routingId, string(tr.RoutingId()))
	}
}
.endfor
