.template 0
#   zproto_codec_clite.gsl
#
#   Generates a codec for a protocol specification
#   Targets raw C without CZMQ, does encode/decode only
#
include "zproto_lib.gsl"
include "zproto_bnf.gsl"
resolve_includes ()
expand_headers ()
generate_bnf ()
set_defaults ()
.endtemplate
.output "../include/$(class.name).h"
/*  =========================================================================
    $(class.name) - $(class.title:)
    
    Codec header for $(class.name).

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

    * The XML model used for this code generation: $(filename)
    * The code generation script that built this file: $(script)
    ************************************************************************
.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

#ifndef __$(CLASS.NAME)_H_INCLUDED__
#define __$(CLASS.NAME)_H_INCLUDED__

/*  These are the $(class.name) messages:
.for message

    $(NAME) - $(string.trim (.?''):left)
.   for field
.       if type = "number"
        $(name)             $(type) $(size)\
                                        $(field.?'':)
.       elsif type = "octets"
        $(name)             $(type) [$(size)]\
                                        $(field.?'':)
.       else
        $(name)             $(type)     $(field.?'':)
.       endif
.   endfor
.endfor
*/

.for define
#define $(CLASS.NAME)_$(DEFINE.NAME:C)      $(value)
.endfor

.for message
#define $(CLASS.NAME)_$(MESSAGE.NAME)       $(id)
.endfor
.for class.field where type = "octets"
#define $(CLASS.NAME)_$(FIELD.NAME)_SIZE    $(size)
.endfor

#ifdef __cplusplus
extern "C" {
#endif

//  Opaque class structure
typedef struct _$(class.name)_t $(class.name)_t;

//  @interface
//  Create a new $(class.name)
CZMQ_EXPORT $(class.name)_t *
    $(class.name)_new (int id);

//  Destroy the $(class.name)
CZMQ_EXPORT void
    $(class.name)_destroy ($(class.name)_t **self_p);

//  Parse a $(class.name) from zmsg_t. Returns a new object, or NULL if
//  the message could not be parsed, or was NULL.
//  and nullifies the msg refernce.
CZMQ_EXPORT $(class.name)_t *
    $(class.name)_decode (zmsg_t **msg_p, int socket_type);

//  Encode $(class.name) into zmsg and destroy it. Returns a newly created
//  object or NULL if error. Use when not in control of sending the message.
CZMQ_EXPORT zmsg_t *
    $(class.name)_encode ($(class.name)_t *self, int socket_type);

//  Duplicate the $(class.name) message
CZMQ_EXPORT $(class.name)_t *
    $(class.name)_dup ($(class.name)_t *self);

//  Print contents of message to stdout
CZMQ_EXPORT void
    $(class.name)_dump ($(class.name)_t *self);

//  Get the $(class.name) id and printable command
CZMQ_EXPORT int
    $(class.name)_id ($(class.name)_t *self);
CZMQ_EXPORT void
    $(class.name)_set_id ($(class.name)_t *self, int id);
CZMQ_EXPORT const char *
    $(class.name)_command ($(class.name)_t *self);

.for class.field where !defined (value)
.   if type = "number"
//  Get/set the $(name) field
CZMQ_EXPORT $(ctype)
    $(class.name)_$(name) ($(class.name)_t *self);
CZMQ_EXPORT void
    $(class.name)_set_$(name) ($(class.name)_t *self, $(ctype) $(name));
.#
.   elsif type = "octets"
//  Get/set the $(name) field
CZMQ_EXPORT byte *
    $(class.name)_$(name) ($(class.name)_t *self);
CZMQ_EXPORT void
    $(class.name)_set_$(name) ($(class.name)_t *self, byte *$(name));
.#
.   elsif type = "string" | type = "longstr"
//  Get/set the $(name) field
CZMQ_EXPORT const char *
    $(class.name)_$(name) ($(class.name)_t *self);
CZMQ_EXPORT void
    $(class.name)_set_$(name) ($(class.name)_t *self, const char *format, ...);
.#
.   else
.       echo "E: unknown type '$(type)' for field '$(name)'"
.   endif

.endfor
//  Self test of this class
CZMQ_EXPORT int
    $(class.name)_test (bool verbose);
//  @end

#ifdef __cplusplus
}
#endif

#endif
.output "$(class.name).c"
/*  =========================================================================
    $(class.name) - $(class.title:)

    Codec class for $(class.name).

    ** WARNING *************************************************************
    THIS SOURCE FILE IS 100% GENERATED. If you edit this file, you will lose
    your changes at the next build cycle. This is great for temporary printf
    statements. DO NOT MAKE ANY CHANGES YOU WISH TO KEEP. The correct places
    for commits are:

    * The XML model used for this code generation: $(filename)
    * The code generation script that built this file: $(script)
    ************************************************************************
    
.   for class.license
    $(string.trim (license.):block                                         )
.   endfor
    =========================================================================
*/

/*
@header
    $(class.name) - $(class.title:)
@discuss
@end
*/

#include <czmq.h>
#include "../include/$(class.name).h"

//  Structure of our class

struct _$(class.name)_t {
    int id;                             //  $(class.name) message ID
    byte *needle;                       //  Read/write pointer for serialization
    byte *ceiling;                      //  Valid upper limit for read pointer
.for class.field
.   if type = "number"
    $(ctype) $(name);                   //  $(field.?'':)
.   elsif type = "octets"
    byte $(name) [$(size)];             //  $(field.?'':)
.   elsif type = "string" | type = "longstr"
    char *$(name);                      //  $(field.?'':)
.   endif
.endfor
};

//  --------------------------------------------------------------------------
//  Network data encoding macros

//  Put a block of octets to the frame
#define PUT_OCTETS(host,size) { \\
    memcpy (self->needle, (host), size); \\
    self->needle += size; \\
}

//  Get a block of octets from the frame
#define GET_OCTETS(host,size) { \\
    if (self->needle + size > self->ceiling) \\
        goto malformed; \\
    memcpy ((host), self->needle, size); \\
    self->needle += size; \\
}

//  Put a 1-byte number to the frame
#define PUT_NUMBER1(host) { \\
    *(byte *) self->needle = (host); \\
    self->needle++; \\
}

//  Put a 2-byte number to the frame
#define PUT_NUMBER2(host) { \\
    self->needle [0] = (byte) (((host) >> 8)  & 255); \\
    self->needle [1] = (byte) (((host))       & 255); \\
    self->needle += 2; \\
}

//  Put a 4-byte number to the frame
#define PUT_NUMBER4(host) { \\
    self->needle [0] = (byte) (((host) >> 24) & 255); \\
    self->needle [1] = (byte) (((host) >> 16) & 255); \\
    self->needle [2] = (byte) (((host) >> 8)  & 255); \\
    self->needle [3] = (byte) (((host))       & 255); \\
    self->needle += 4; \\
}

//  Put a 8-byte number to the frame
#define PUT_NUMBER8(host) { \\
    self->needle [0] = (byte) (((host) >> 56) & 255); \\
    self->needle [1] = (byte) (((host) >> 48) & 255); \\
    self->needle [2] = (byte) (((host) >> 40) & 255); \\
    self->needle [3] = (byte) (((host) >> 32) & 255); \\
    self->needle [4] = (byte) (((host) >> 24) & 255); \\
    self->needle [5] = (byte) (((host) >> 16) & 255); \\
    self->needle [6] = (byte) (((host) >> 8)  & 255); \\
    self->needle [7] = (byte) (((host))       & 255); \\
    self->needle += 8; \\
}

//  Get a 1-byte number from the frame
#define GET_NUMBER1(host) { \\
    if (self->needle + 1 > self->ceiling) \\
        goto malformed; \\
    (host) = *(byte *) self->needle; \\
    self->needle++; \\
}

//  Get a 2-byte number from the frame
#define GET_NUMBER2(host) { \\
    if (self->needle + 2 > self->ceiling) \\
        goto malformed; \\
    (host) = ((uint16_t) (self->needle [0]) << 8) \\
           +  (uint16_t) (self->needle [1]); \\
    self->needle += 2; \\
}

//  Get a 4-byte number from the frame
#define GET_NUMBER4(host) { \\
    if (self->needle + 4 > self->ceiling) \\
        goto malformed; \\
    (host) = ((uint32_t) (self->needle [0]) << 24) \\
           + ((uint32_t) (self->needle [1]) << 16) \\
           + ((uint32_t) (self->needle [2]) << 8) \\
           +  (uint32_t) (self->needle [3]); \\
    self->needle += 4; \\
}

//  Get a 8-byte number from the frame
#define GET_NUMBER8(host) { \\
    if (self->needle + 8 > self->ceiling) \\
        goto malformed; \\
    (host) = ((uint64_t) (self->needle [0]) << 56) \\
           + ((uint64_t) (self->needle [1]) << 48) \\
           + ((uint64_t) (self->needle [2]) << 40) \\
           + ((uint64_t) (self->needle [3]) << 32) \\
           + ((uint64_t) (self->needle [4]) << 24) \\
           + ((uint64_t) (self->needle [5]) << 16) \\
           + ((uint64_t) (self->needle [6]) << 8) \\
           +  (uint64_t) (self->needle [7]); \\
    self->needle += 8; \\
}

//  Put a string to the frame
#define PUT_STRING(host) { \\
    size_t string_size = strlen (host); \\
    PUT_NUMBER1 (string_size); \\
    memcpy (self->needle, (host), string_size); \\
    self->needle += string_size; \\
}

//  Get a string from the frame
#define GET_STRING(host) { \\
    size_t string_size; \\
    GET_NUMBER1 (string_size); \\
    if (self->needle + string_size > (self->ceiling)) \\
        goto malformed; \\
    (host) = (char *) malloc (string_size + 1); \\
    memcpy ((host), self->needle, string_size); \\
    (host) [string_size] = 0; \\
    self->needle += string_size; \\
}

//  Put a long string to the frame
#define PUT_LONGSTR(host) { \\
    size_t string_size = strlen (host); \\
    PUT_NUMBER4 (string_size); \\
    memcpy (self->needle, (host), string_size); \\
    self->needle += string_size; \\
}

//  Get a long string from the frame
#define GET_LONGSTR(host) { \\
    size_t string_size; \\
    GET_NUMBER4 (string_size); \\
    if (self->needle + string_size > (self->ceiling)) \\
        goto malformed; \\
    (host) = (char *) malloc (string_size + 1); \\
    memcpy ((host), self->needle, string_size); \\
    (host) [string_size] = 0; \\
    self->needle += string_size; \\
}


//  --------------------------------------------------------------------------
//  Create a new $(class.name)

$(class.name)_t *
$(class.name)_new (int id)
{
    $(class.name)_t *self = ($(class.name)_t *) zmalloc (sizeof ($(class.name)_t));
    self->id = id;
    return self;
}


//  --------------------------------------------------------------------------
//  Destroy the $(class.name)

void
$(class.name)_destroy ($(class.name)_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        $(class.name)_t *self = *self_p;

        //  Free class properties
.for class.field
.   if type = "string" | type = "longstr"
        free (self->$(name));
.   endif
.endfor

        //  Free object itself
        free (self);
        *self_p = NULL;
    }
}


//  --------------------------------------------------------------------------
//  Parse a $(class.name) from zmsg_t. Returns a new object, or NULL if
//  the message could not be parsed, or was NULL.

$(class.name)_t *
$(class.name)_decode (zmsg_t **msg_p, int socket_type)
{
    assert (msg_p);
    zmsg_t *msg = *msg_p;
    if (msg == NULL)
        return NULL;
        
    $(class.name)_t *self = $(class.name)_new (0);
    //  Read and parse command in frame
    zframe_t *frame = zmsg_pop (msg);
    if (!frame) 
        goto empty;             //  Malformed or empty

    //  Get and check protocol signature
    self->needle = zframe_data (frame);
    self->ceiling = self->needle + zframe_size (frame);
    uint16_t signature;
    GET_NUMBER2 (signature);
    if (signature != (0xAAA0 | $(class.signature)))
        goto empty;             //  Invalid signature

    //  Get message id and parse per message type
    GET_NUMBER1 (self->id);

    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
            GET_NUMBER$(size) (self->$(name));
.           if defined (field.value)
            if (self->$(name) != $(field.value:))
                goto malformed;
.           endif
.       elsif type = "octets"
            GET_OCTETS (self->$(name), $(size));
.       elsif type = "string"
            GET_STRING (self->$(name));
.           if defined (field.value)
            if (strneq (self->$(name), "$(field.value:)"))
                goto malformed;
.           endif
.       elsif type = "longstr"
            GET_LONGSTR (self->$(name));
.       endif
.   endfor
            break;

.endfor
        default:
            goto malformed;
    }
    //  Successful return
    zframe_destroy (&frame);
    zmsg_destroy (msg_p);
    return self;

    //  Error returns
    malformed:
        printf ("E: malformed message '%d'\\n", self->id);
    empty:
        zframe_destroy (&frame);
        zmsg_destroy (msg_p);
        $(class.name)_destroy (&self);
        return (NULL);
}


//  Encode $(class.name) into zmsg and destroy it. Returns a newly created
//  object or NULL if error. Use when not in control of sending the message.

zmsg_t *
$(class.name)_encode ($(class.name)_t *self, int socket_type)
{
    assert (self);
    zmsg_t *msg = zmsg_new ();

    size_t frame_size = 2 + 1;          //  Signature and message ID
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
            //  $(name) is a $(size)-byte integer
            frame_size += $(size);
.       elsif type = "octets"
            //  $(name) is a block of $(size) bytes
            frame_size += $(size);
.       elsif type = "string"
            //  $(name) is a string with 1-byte length
.           if defined (field.value)
            frame_size += 1 + strlen ("$(field.value:)");
.           else
            frame_size++;       //  Size is one octet
            if (self->$(name))
                frame_size += strlen (self->$(name));
.           endif
.       elsif type = "longstr"
            //  $(name) is a string with 4-byte length
            frame_size += 4;
            if (self->$(name))
                frame_size += strlen (self->$(name));
.       endif
.   endfor
            break;
            
.endfor
        default:
            printf ("E: bad message type '%d', not sent\\n", self->id);
            //  No recovery, this is a fatal application error
            assert (false);
    }
    //  Now serialize message into the frame
    zframe_t *frame = zframe_new (NULL, frame_size);
    self->needle = zframe_data (frame);
    PUT_NUMBER2 (0xAAA0 | $(class.signature));
    PUT_NUMBER1 (self->id);

    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
.           if defined (field.value)
            PUT_NUMBER$(size) ($(field.value:));
.           else
            PUT_NUMBER$(size) (self->$(name));
.           endif
.       elsif type = "octets"
            PUT_OCTETS (self->$(name), $(size));
.       elsif type = "string"
.           if defined (field.value)
            PUT_STRING ("$(field.value:)");
.           else
            if (self->$(name)) {
                PUT_STRING (self->$(name));
            }
            else
                PUT_NUMBER1 (0);    //  Empty string
.           endif
.       elsif type = "longstr"
            if (self->$(name)) {
                PUT_LONGSTR (self->$(name));
            }
            else
                PUT_NUMBER4 (0);    //  Empty string
.       endif
.   endfor
            break;

.endfor
    }
    //  Now send the data frame
    if (zmsg_append (msg, &frame)) {
        zmsg_destroy (&msg);
        $(class.name)_destroy (&self);
        return NULL;
    }
    //  Destroy $(class.name) object
    $(class.name)_destroy (&self);
    return msg;

}

//  --------------------------------------------------------------------------
//  Duplicate the $(class.name) message

$(class.name)_t *
$(class.name)_dup ($(class.name)_t *self)
{
    if (!self)
        return NULL;
        
    $(class.name)_t *copy = $(class.name)_new (self->id);
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
.   for field
.       if type = "number"
            copy->$(name) = self->$(name);
.       elsif type = "octets"
            memcpy (copy->$(name), self->$(name), $(size));
.       elsif type = "string" | type = "longstr"
            copy->$(name) = self->$(name)? strdup (self->$(name)): NULL;
.       endif
.   endfor
            break;

.endfor
    }
    return copy;
}


//  --------------------------------------------------------------------------
//  Print contents of message to stdout

void
$(class.name)_dump ($(class.name)_t *self)
{
    assert (self);
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
            puts ("$(MESSAGE.NAME):");
.   for field
.       if type = "number"
.           if defined (field.value)
            printf ("    $(name)=$(field.value)\\n");
.           else
            printf ("    $(name)=%ld\\n", (long) self->$(name));
.           endif
.       elsif type = "octets"
            printf ("    $(name)=[");
            int $(name)_index;
            for ($(name)_index = 0; $(name)_index < $(size); $(name)_index++) {
                if ($(name)_index && ($(name)_index % 4 == 0))
                    printf ("-");
                printf ("%02X", self->$(name) [$(name)_index]);
            }
        printf ("\\n");
.       elsif type = "string" | type = "longstr"
.           if defined (field.value)
            printf ("    $(name)=$(field.value)\\n");
.           else
            if (self->$(name))
                printf ("    $(name)='%s'\\n", self->$(name));
            else
                printf ("    $(name)=\\n");
.           endif
.       endif
.   endfor
            break;
            
.endfor
    }
}


//  --------------------------------------------------------------------------
//  Get/set the $(class.name) id

int
$(class.name)_id ($(class.name)_t *self)
{
    assert (self);
    return self->id;
}

void
$(class.name)_set_id ($(class.name)_t *self, int id)
{
    self->id = id;
}

//  --------------------------------------------------------------------------
//  Return a printable command string

const char *
$(class.name)_command ($(class.name)_t *self)
{
    assert (self);
    switch (self->id) {
.for class.message
        case $(CLASS.NAME)_$(MESSAGE.NAME):
            return ("$(MESSAGE.NAME)");
            break;
.endfor
    }
    return "?";
}

.for class.field where !defined (value)
.   if type = "number"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

$(ctype)
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, $(ctype) $(name))
{
    assert (self);
    self->$(name) = $(name);
}

.   elsif type = "octets"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

byte * 
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, byte *$(name))
{
    assert (self);
    memcpy (self->$(name), $(name), $(size));
}

.   elsif type = "string" | type = "longstr"
//  --------------------------------------------------------------------------
//  Get/set the $(name) field

const char *
$(class.name)_$(name) ($(class.name)_t *self)
{
    assert (self);
    return self->$(name);
}

void
$(class.name)_set_$(name) ($(class.name)_t *self, const char *format, ...)
{
    //  Format $(name) from provided arguments
    assert (self);
    va_list argptr;
    va_start (argptr, format);
    free (self->$(name));
    self->$(name) = zsys_vprintf (format, argptr);
    va_end (argptr);
}


.   endif

.endfor

//  --------------------------------------------------------------------------
//  Selftest

int
$(class.name)_test (bool verbose)
{
    printf (" * $(class.name): ");

    //  @selftest
    //  Simple create/destroy test
    $(class.name)_t *self = $(class.name)_new (0);
    assert (self);
    $(class.name)_destroy (&self);

    //  Create pair of sockets we can send through
    zctx_t *ctx = zctx_new ();
    assert (ctx);

    void *output = zsocket_new (ctx, ZMQ_DEALER);
    assert (output);
    zsocket_bind (output, "inproc://selftest");

    void *input = zsocket_new (ctx, ZMQ_ROUTER);
    assert (input);
    zsocket_connect (input, "inproc://selftest");
    
    //  Encode/send/decode and verify each message type
    int instance;
    $(class.name)_t *copy;
.for class.message
    self = $(class.name)_new ($(CLASS.NAME)_$(MESSAGE.NAME));
    
    //  Check that _dup works on empty message
    copy = $(class.name)_dup (self);
    assert (copy);
    $(class.name)_destroy (&copy);

.   for field where !defined (value)
.       if type = "number"
    $(class.name)_set_$(name) (self, 123);
.       elsif type = "octets"
    byte $(name)_data [$(CLASS.NAME)_$(FIELD.NAME)_SIZE];
    memset ($(name)_data, 123, $(CLASS.NAME)_$(FIELD.NAME)_SIZE);
    $(class.name)_set_$(name) (self, $(name)_data);
.       elsif type = "string" | type = "longstr"
    $(class.name)_set_$(name) (self, "Life is short but Now lasts for ever");
.       endif
.   endfor

    for (instance = 0; instance < 2; instance++) {
        self = $(class.name)_recv (input);
        assert (self);
        
.   for field where !defined (value) 
.       if type = "number"
        assert ($(class.name)_$(name) (self) == 123);
.       elsif type = "octets"
        assert ($(class.name)_$(name) (self) [0] == 123);
        assert ($(class.name)_$(name) (self) [$(CLASS.NAME)_$(FIELD.NAME)_SIZE - 1] == 123);
.       elsif type = "string" | type = "longstr"
        assert (streq ($(class.name)_$(name) (self), "Life is short but Now lasts for ever"));
.       endif
.   endfor
        $(class.name)_destroy (&self);
    }
.endfor

    zctx_destroy (&ctx);
    //  @end

    printf ("OK\\n");
    return 0;
}
