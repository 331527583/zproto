.#  zproto_bnf.gsl
.#
.#  Generates a BNF grammar from a protocol specification
.#  The grammar will need manual reworking to be sensible.
.#
.include "library.gsl"
.resolve_includes ()
.set_defaults ()
.echo "Generating $(class.name).bnf..."
.output "$(class.name).bnf"
The following ABNF grammar defines the $(class.title:):

    $(class.name)   = *(\
.for message
 C:$(message.name:)\
.   if !last ()
 |\
.   endif
.endfor
\ )

.for message
    C:$(message.name:)\
                    = signature %d$(id)\
.   for field
 $(field.name)\
.   endfor

.if first()
    signature       = %xAA %d$(signature)   ; two octets
.endif
.   for field
.       if type = "number"
    $(name)         = number-$(size)        ; $(field.?'':)
.       elsif type = "octets"
    $(name)         = $(size)OCTET          ; $(field.?'':)
.       else
    $(name)         = $(type)               ; $(field.?'':)
.       endif
.   endfor

.endfor
    ; Numbers are unsigned integers in network byte order
    number-1        = 1OCTET
    number-2        = 2OCTET
    number-4        = 4OCTET
    number-8        = 8OCTET
    
    ; Strings are always length + text contents
    string          = number-1 *VCHAR
    longstr         = number-4 *VCHAR

    ; A list of string values
    strings         = count *value
    value           = string-1

    ; A list of name/value pairs
    dictionary      = count *name-value
    count           = number-1
    name-value      = string-1              ; "name=value"

    ; A chunk has 4-octet length + binary contents
    longstr         = number-4 *OCTET

    ; A frame is zero or more octets encoded as a ZeroMQ frame
    frame           = *OCTET                

    ; A msg is zero or more distinct frames
    msg             = *frame
